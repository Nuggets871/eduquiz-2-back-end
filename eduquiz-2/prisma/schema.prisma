// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  decks       Deck[]
  progress    UserProgress[]
  stats       UserStats?
  userBadges  UserBadge[]
  friends     Friendship[]   @relation("UserFriends")
  friendOf    Friendship[]   @relation("FriendFriends")
  Leaderboard Leaderboard[]
  UserRole    UserRole[]
}

model Deck {
  id          String   @id @default(uuid())
  title       String
  description String?
  language    String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
  cards  Card[]
}

model Card {
  id        String   @id @default(uuid())
  front     String
  back      String
  hint      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  deck   Deck   @relation(fields: [deckId], references: [id])
  deckId String

  progress UserProgress[]
}

model UserProgress {
  id            String         @id @default(uuid())
  status        ProgressStatus
  lastReviewed  DateTime?
  nextReviewDue DateTime?
  streak        Int            @default(0)

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  card   Card   @relation(fields: [cardId], references: [id])
  cardId String
}

enum ProgressStatus {
  NEW
  LEARNING
  REVIEW
  MASTERED
}

model UserStats {
  id         String @id @default(uuid())
  xp         Int    @default(0)
  level      Int    @default(1)
  streakDays Int    @default(0)

  // Relation 1-1
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Badge {
  id          String  @id @default(uuid())
  name        String
  description String?
  iconUrl     String?

  // Relations
  userBadges UserBadge[]
}

model UserBadge {
  id       String   @id @default(uuid())
  earnedAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  badge   Badge  @relation(fields: [badgeId], references: [id])
  badgeId String
}

model Friendship {
  id     String           @id @default(uuid())
  status FriendshipStatus

  // Relations (self-relation)
  user   User   @relation("UserFriends", fields: [userId], references: [id])
  userId String

  friend   User   @relation("FriendFriends", fields: [friendId], references: [id])
  friendId String
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Leaderboard {
  id     String            @id @default(uuid())
  period LeaderboardPeriod
  xp     Int

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum LeaderboardPeriod {
  WEEKLY
  MONTHLY
  ALL_TIME
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
}

model UserRole {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId Int
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
}
